// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::Request_Socket* socketcall_;
  const ::Request_Connect* connectcall_;
  const ::Request_Close* closecall_;
  const ::Request_Recvfrom* recvfromcall_;
  const ::Request_Sendto* sendtocall_;
  const ::Request_Poll* pollcall_;
  const ::Request_Select* selectcall_;
  const ::Request_Getpeername* getpeernamecall_;
  const ::Request_Getsockname* getsocknamecall_;
  const ::Request_Getsockopt* getsockoptcall_;
  const ::Request_Setsockopt* setsockoptcall_;
  const ::Request_Fcntl* fcntlcall_;
  const ::Request_Atstart* atstartaction_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_Socket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Socket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Close_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Recvfrom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Recvfrom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Sendto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Sendto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Poll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Poll_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Select_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Select_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Getpeername_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Getpeername_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Getsockname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Getsockname_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Getsockopt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Getsockopt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Setsockopt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Setsockopt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Fcntl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Fcntl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Atstart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Atstart_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[15] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, socketcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, connectcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, closecall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, recvfromcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, sendtocall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, pollcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, selectcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, getpeernamecall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, getsocknamecall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, getsockoptcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, setsockoptcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, fcntlcall_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, atstartaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, calling_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Request_Socket_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_Socket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Socket, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Socket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Socket, protocol_),
  };
  Request_Socket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Socket_descriptor_,
      Request_Socket::default_instance_,
      Request_Socket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Socket, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Socket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Socket, _internal_metadata_),
      -1);
  Request_Connect_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_Connect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, addr_),
  };
  Request_Connect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Connect_descriptor_,
      Request_Connect::default_instance_,
      Request_Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Connect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, _internal_metadata_),
      -1);
  Request_Close_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_Close_offsets_[1] = {
  };
  Request_Close_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Close_descriptor_,
      Request_Close::default_instance_,
      Request_Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Close, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Close),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Close, _internal_metadata_),
      -1);
  Request_Recvfrom_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_Recvfrom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Recvfrom, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Recvfrom, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Recvfrom, requireaddr_),
  };
  Request_Recvfrom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Recvfrom_descriptor_,
      Request_Recvfrom::default_instance_,
      Request_Recvfrom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Recvfrom, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Recvfrom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Recvfrom, _internal_metadata_),
      -1);
  Request_Sendto_descriptor_ = Request_descriptor_->nested_type(4);
  static const int Request_Sendto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Sendto, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Sendto, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Sendto, addr_),
  };
  Request_Sendto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Sendto_descriptor_,
      Request_Sendto::default_instance_,
      Request_Sendto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Sendto, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Sendto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Sendto, _internal_metadata_),
      -1);
  Request_Poll_descriptor_ = Request_descriptor_->nested_type(5);
  static const int Request_Poll_offsets_[1] = {
  };
  Request_Poll_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Poll_descriptor_,
      Request_Poll::default_instance_,
      Request_Poll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Poll, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Poll),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Poll, _internal_metadata_),
      -1);
  Request_Select_descriptor_ = Request_descriptor_->nested_type(6);
  static const int Request_Select_offsets_[1] = {
  };
  Request_Select_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Select_descriptor_,
      Request_Select::default_instance_,
      Request_Select_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Select, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Select),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Select, _internal_metadata_),
      -1);
  Request_Getpeername_descriptor_ = Request_descriptor_->nested_type(7);
  static const int Request_Getpeername_offsets_[1] = {
  };
  Request_Getpeername_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Getpeername_descriptor_,
      Request_Getpeername::default_instance_,
      Request_Getpeername_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getpeername, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Getpeername),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getpeername, _internal_metadata_),
      -1);
  Request_Getsockname_descriptor_ = Request_descriptor_->nested_type(8);
  static const int Request_Getsockname_offsets_[1] = {
  };
  Request_Getsockname_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Getsockname_descriptor_,
      Request_Getsockname::default_instance_,
      Request_Getsockname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getsockname, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Getsockname),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getsockname, _internal_metadata_),
      -1);
  Request_Getsockopt_descriptor_ = Request_descriptor_->nested_type(9);
  static const int Request_Getsockopt_offsets_[1] = {
  };
  Request_Getsockopt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Getsockopt_descriptor_,
      Request_Getsockopt::default_instance_,
      Request_Getsockopt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getsockopt, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Getsockopt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Getsockopt, _internal_metadata_),
      -1);
  Request_Setsockopt_descriptor_ = Request_descriptor_->nested_type(10);
  static const int Request_Setsockopt_offsets_[1] = {
  };
  Request_Setsockopt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Setsockopt_descriptor_,
      Request_Setsockopt::default_instance_,
      Request_Setsockopt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Setsockopt, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Setsockopt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Setsockopt, _internal_metadata_),
      -1);
  Request_Fcntl_descriptor_ = Request_descriptor_->nested_type(11);
  static const int Request_Fcntl_offsets_[1] = {
  };
  Request_Fcntl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Fcntl_descriptor_,
      Request_Fcntl::default_instance_,
      Request_Fcntl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Fcntl, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Fcntl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Fcntl, _internal_metadata_),
      -1);
  Request_Atstart_descriptor_ = Request_descriptor_->nested_type(12);
  static const int Request_Atstart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Atstart, progname_),
  };
  Request_Atstart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Atstart_descriptor_,
      Request_Atstart::default_instance_,
      Request_Atstart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Atstart, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request_Atstart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Atstart, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Socket_descriptor_, &Request_Socket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Connect_descriptor_, &Request_Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Close_descriptor_, &Request_Close::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Recvfrom_descriptor_, &Request_Recvfrom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Sendto_descriptor_, &Request_Sendto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Poll_descriptor_, &Request_Poll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Select_descriptor_, &Request_Select::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Getpeername_descriptor_, &Request_Getpeername::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Getsockname_descriptor_, &Request_Getsockname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Getsockopt_descriptor_, &Request_Getsockopt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Setsockopt_descriptor_, &Request_Setsockopt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Fcntl_descriptor_, &Request_Fcntl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Atstart_descriptor_, &Request_Atstart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_Socket::default_instance_;
  delete Request_Socket_reflection_;
  delete Request_Connect::default_instance_;
  delete Request_Connect_reflection_;
  delete Request_Close::default_instance_;
  delete Request_Close_reflection_;
  delete Request_Recvfrom::default_instance_;
  delete Request_Recvfrom_reflection_;
  delete Request_Sendto::default_instance_;
  delete Request_Sendto_reflection_;
  delete Request_Poll::default_instance_;
  delete Request_Poll_reflection_;
  delete Request_Select::default_instance_;
  delete Request_Select_reflection_;
  delete Request_Getpeername::default_instance_;
  delete Request_Getpeername_reflection_;
  delete Request_Getsockname::default_instance_;
  delete Request_Getsockname_reflection_;
  delete Request_Getsockopt::default_instance_;
  delete Request_Getsockopt_reflection_;
  delete Request_Setsockopt::default_instance_;
  delete Request_Setsockopt_reflection_;
  delete Request_Fcntl::default_instance_;
  delete Request_Fcntl_reflection_;
  delete Request_Atstart::default_instance_;
  delete Request_Atstart_reflection_;
}

void protobuf_AddDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\"\201\007\n\007Request\022%\n\nsocketCal"
    "l\030\001 \001(\0132\017.Request.SocketH\000\022\'\n\013connectCal"
    "l\030\002 \001(\0132\020.Request.ConnectH\000\022#\n\tcloseCall"
    "\030\003 \001(\0132\016.Request.CloseH\000\022)\n\014recvfromCall"
    "\030\004 \001(\0132\021.Request.RecvfromH\000\022%\n\nsendtoCal"
    "l\030\005 \001(\0132\017.Request.SendtoH\000\022!\n\010pollCall\030\006"
    " \001(\0132\r.Request.PollH\000\022%\n\nselectCall\030\007 \001("
    "\0132\017.Request.SelectH\000\022/\n\017getpeernameCall\030"
    "\010 \001(\0132\024.Request.GetpeernameH\000\022/\n\017getsock"
    "nameCall\030\t \001(\0132\024.Request.GetsocknameH\000\022-"
    "\n\016getsockoptCall\030\n \001(\0132\023.Request.Getsock"
    "optH\000\022-\n\016setsockoptCall\030\013 \001(\0132\023.Request."
    "SetsockoptH\000\022#\n\tfcntlCall\030\014 \001(\0132\016.Reques"
    "t.FcntlH\000\022)\n\ratstartAction\030\020 \001(\0132\020.Reque"
    "st.AtstartH\000\022\013\n\003pid\030\017 \002(\004\0328\n\006Socket\022\016\n\006d"
    "omain\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\020\n\010protocol\030\003 "
    "\002(\005\032\027\n\007Connect\022\014\n\004addr\030\001 \002(\014\032\007\n\005Close\032;\n"
    "\010Recvfrom\022\013\n\003len\030\001 \002(\005\022\r\n\005flags\030\002 \002(\005\022\023\n"
    "\013requireAddr\030\003 \002(\010\0322\n\006Sendto\022\013\n\003buf\030\001 \002("
    "\014\022\r\n\005flags\030\002 \002(\005\022\014\n\004addr\030\003 \001(\014\032\006\n\004Poll\032\010"
    "\n\006Select\032\r\n\013Getpeername\032\r\n\013Getsockname\032\014"
    "\n\nGetsockopt\032\014\n\nSetsockopt\032\007\n\005Fcntl\032\033\n\007A"
    "tstart\022\020\n\010progname\030\001 \002(\tB\t\n\007calling", 915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Request_Socket::default_instance_ = new Request_Socket();
  Request_Connect::default_instance_ = new Request_Connect();
  Request_Close::default_instance_ = new Request_Close();
  Request_Recvfrom::default_instance_ = new Request_Recvfrom();
  Request_Sendto::default_instance_ = new Request_Sendto();
  Request_Poll::default_instance_ = new Request_Poll();
  Request_Select::default_instance_ = new Request_Select();
  Request_Getpeername::default_instance_ = new Request_Getpeername();
  Request_Getsockname::default_instance_ = new Request_Getsockname();
  Request_Getsockopt::default_instance_ = new Request_Getsockopt();
  Request_Setsockopt::default_instance_ = new Request_Setsockopt();
  Request_Fcntl::default_instance_ = new Request_Fcntl();
  Request_Atstart::default_instance_ = new Request_Atstart();
  Request::default_instance_->InitAsDefaultInstance();
  Request_Socket::default_instance_->InitAsDefaultInstance();
  Request_Connect::default_instance_->InitAsDefaultInstance();
  Request_Close::default_instance_->InitAsDefaultInstance();
  Request_Recvfrom::default_instance_->InitAsDefaultInstance();
  Request_Sendto::default_instance_->InitAsDefaultInstance();
  Request_Poll::default_instance_->InitAsDefaultInstance();
  Request_Select::default_instance_->InitAsDefaultInstance();
  Request_Getpeername::default_instance_->InitAsDefaultInstance();
  Request_Getsockname::default_instance_->InitAsDefaultInstance();
  Request_Getsockopt::default_instance_->InitAsDefaultInstance();
  Request_Setsockopt::default_instance_->InitAsDefaultInstance();
  Request_Fcntl::default_instance_->InitAsDefaultInstance();
  Request_Atstart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Socket::kDomainFieldNumber;
const int Request_Socket::kTypeFieldNumber;
const int Request_Socket::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Socket::Request_Socket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Socket)
}

void Request_Socket::InitAsDefaultInstance() {
}

Request_Socket::Request_Socket(const Request_Socket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Socket)
}

void Request_Socket::SharedCtor() {
  _cached_size_ = 0;
  domain_ = 0;
  type_ = 0;
  protocol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Socket::~Request_Socket() {
  // @@protoc_insertion_point(destructor:Request.Socket)
  SharedDtor();
}

void Request_Socket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Socket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Socket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Socket_descriptor_;
}

const Request_Socket& Request_Socket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Socket* Request_Socket::default_instance_ = NULL;

Request_Socket* Request_Socket::New(::google::protobuf::Arena* arena) const {
  Request_Socket* n = new Request_Socket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Socket::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Socket)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_Socket, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_Socket*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(domain_, protocol_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Socket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Socket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 domain = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protocol;
        break;
      }

      // required int32 protocol = 3;
      case 3: {
        if (tag == 24) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Socket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Socket)
  return false;
#undef DO_
}

void Request_Socket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Socket)
  // required int32 domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->domain(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->protocol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Socket)
}

::google::protobuf::uint8* Request_Socket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Socket)
  // required int32 domain = 1;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->domain(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 protocol = 3;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->protocol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Socket)
  return target;
}

int Request_Socket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Request.Socket)
  int total_size = 0;

  if (has_domain()) {
    // required int32 domain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->domain());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_protocol()) {
    // required int32 protocol = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocol());
  }

  return total_size;
}
int Request_Socket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Socket)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 domain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->domain());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 protocol = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocol());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Socket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Socket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Socket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Socket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Socket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Socket)
    MergeFrom(*source);
  }
}

void Request_Socket::MergeFrom(const Request_Socket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Socket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Socket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Socket::CopyFrom(const Request_Socket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Socket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_Socket::Swap(Request_Socket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Socket::InternalSwap(Request_Socket* other) {
  std::swap(domain_, other->domain_);
  std::swap(type_, other->type_);
  std::swap(protocol_, other->protocol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Socket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Socket_descriptor_;
  metadata.reflection = Request_Socket_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Connect::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Connect::Request_Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Connect)
}

void Request_Connect::InitAsDefaultInstance() {
}

Request_Connect::Request_Connect(const Request_Connect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Connect)
}

void Request_Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Connect::~Request_Connect() {
  // @@protoc_insertion_point(destructor:Request.Connect)
  SharedDtor();
}

void Request_Connect::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Connect_descriptor_;
}

const Request_Connect& Request_Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Connect* Request_Connect::default_instance_ = NULL;

Request_Connect* Request_Connect::New(::google::protobuf::Arena* arena) const {
  Request_Connect* n = new Request_Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Connect)
  if (has_addr()) {
    addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Connect)
  return false;
#undef DO_
}

void Request_Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Connect)
  // required bytes addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Connect)
}

::google::protobuf::uint8* Request_Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Connect)
  // required bytes addr = 1;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Connect)
  return target;
}

int Request_Connect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Connect)
  int total_size = 0;

  // required bytes addr = 1;
  if (has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Connect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Connect)
    MergeFrom(*source);
  }
}

void Request_Connect::MergeFrom(const Request_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Connect::CopyFrom(const Request_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_Connect::Swap(Request_Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Connect::InternalSwap(Request_Connect* other) {
  addr_.Swap(&other->addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Connect_descriptor_;
  metadata.reflection = Request_Connect_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Close::Request_Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Close)
}

void Request_Close::InitAsDefaultInstance() {
}

Request_Close::Request_Close(const Request_Close& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Close)
}

void Request_Close::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Close::~Request_Close() {
  // @@protoc_insertion_point(destructor:Request.Close)
  SharedDtor();
}

void Request_Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Close_descriptor_;
}

const Request_Close& Request_Close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Close* Request_Close::default_instance_ = NULL;

Request_Close* Request_Close::New(::google::protobuf::Arena* arena) const {
  Request_Close* n = new Request_Close;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Close)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Close)
  return false;
#undef DO_
}

void Request_Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Close)
}

::google::protobuf::uint8* Request_Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Close)
  return target;
}

int Request_Close::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Close)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Close)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Close* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Close)
    MergeFrom(*source);
  }
}

void Request_Close::MergeFrom(const Request_Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Close)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Close::CopyFrom(const Request_Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Close::IsInitialized() const {

  return true;
}

void Request_Close::Swap(Request_Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Close::InternalSwap(Request_Close* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Close_descriptor_;
  metadata.reflection = Request_Close_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Recvfrom::kLenFieldNumber;
const int Request_Recvfrom::kFlagsFieldNumber;
const int Request_Recvfrom::kRequireAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Recvfrom::Request_Recvfrom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Recvfrom)
}

void Request_Recvfrom::InitAsDefaultInstance() {
}

Request_Recvfrom::Request_Recvfrom(const Request_Recvfrom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Recvfrom)
}

void Request_Recvfrom::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0;
  flags_ = 0;
  requireaddr_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Recvfrom::~Request_Recvfrom() {
  // @@protoc_insertion_point(destructor:Request.Recvfrom)
  SharedDtor();
}

void Request_Recvfrom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Recvfrom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Recvfrom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Recvfrom_descriptor_;
}

const Request_Recvfrom& Request_Recvfrom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Recvfrom* Request_Recvfrom::default_instance_ = NULL;

Request_Recvfrom* Request_Recvfrom::New(::google::protobuf::Arena* arena) const {
  Request_Recvfrom* n = new Request_Recvfrom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Recvfrom::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Recvfrom)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_Recvfrom, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_Recvfrom*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(len_, requireaddr_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Recvfrom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Recvfrom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required int32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requireAddr;
        break;
      }

      // required bool requireAddr = 3;
      case 3: {
        if (tag == 24) {
         parse_requireAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireaddr_)));
          set_has_requireaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Recvfrom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Recvfrom)
  return false;
#undef DO_
}

void Request_Recvfrom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Recvfrom)
  // required int32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // required int32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  // required bool requireAddr = 3;
  if (has_requireaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requireaddr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Recvfrom)
}

::google::protobuf::uint8* Request_Recvfrom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Recvfrom)
  // required int32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // required int32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flags(), target);
  }

  // required bool requireAddr = 3;
  if (has_requireaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->requireaddr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Recvfrom)
  return target;
}

int Request_Recvfrom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Request.Recvfrom)
  int total_size = 0;

  if (has_len()) {
    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  if (has_flags()) {
    // required int32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  if (has_requireaddr()) {
    // required bool requireAddr = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int Request_Recvfrom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Recvfrom)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

    // required int32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());

    // required bool requireAddr = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Recvfrom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Recvfrom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Recvfrom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Recvfrom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Recvfrom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Recvfrom)
    MergeFrom(*source);
  }
}

void Request_Recvfrom::MergeFrom(const Request_Recvfrom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Recvfrom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_requireaddr()) {
      set_requireaddr(from.requireaddr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Recvfrom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Recvfrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Recvfrom::CopyFrom(const Request_Recvfrom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Recvfrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Recvfrom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_Recvfrom::Swap(Request_Recvfrom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Recvfrom::InternalSwap(Request_Recvfrom* other) {
  std::swap(len_, other->len_);
  std::swap(flags_, other->flags_);
  std::swap(requireaddr_, other->requireaddr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Recvfrom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Recvfrom_descriptor_;
  metadata.reflection = Request_Recvfrom_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Sendto::kBufFieldNumber;
const int Request_Sendto::kFlagsFieldNumber;
const int Request_Sendto::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Sendto::Request_Sendto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Sendto)
}

void Request_Sendto::InitAsDefaultInstance() {
}

Request_Sendto::Request_Sendto(const Request_Sendto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Sendto)
}

void Request_Sendto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Sendto::~Request_Sendto() {
  // @@protoc_insertion_point(destructor:Request.Sendto)
  SharedDtor();
}

void Request_Sendto::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_Sendto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Sendto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Sendto_descriptor_;
}

const Request_Sendto& Request_Sendto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Sendto* Request_Sendto::default_instance_ = NULL;

Request_Sendto* Request_Sendto::New(::google::protobuf::Arena* arena) const {
  Request_Sendto* n = new Request_Sendto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Sendto::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Sendto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_buf()) {
      buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    flags_ = 0;
    if (has_addr()) {
      addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Sendto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Sendto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required int32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // optional bytes addr = 3;
      case 3: {
        if (tag == 26) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Sendto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Sendto)
  return false;
#undef DO_
}

void Request_Sendto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Sendto)
  // required bytes buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // required int32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  // optional bytes addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Sendto)
}

::google::protobuf::uint8* Request_Sendto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Sendto)
  // required bytes buf = 1;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }

  // required int32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flags(), target);
  }

  // optional bytes addr = 3;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Sendto)
  return target;
}

int Request_Sendto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Request.Sendto)
  int total_size = 0;

  if (has_buf()) {
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  if (has_flags()) {
    // required int32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  return total_size;
}
int Request_Sendto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Sendto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes buf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());

    // required int32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes addr = 3;
  if (has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Sendto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Sendto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Sendto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Sendto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Sendto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Sendto)
    MergeFrom(*source);
  }
}

void Request_Sendto::MergeFrom(const Request_Sendto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Sendto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_has_buf();
      buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Sendto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Sendto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Sendto::CopyFrom(const Request_Sendto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Sendto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Sendto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_Sendto::Swap(Request_Sendto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Sendto::InternalSwap(Request_Sendto* other) {
  buf_.Swap(&other->buf_);
  std::swap(flags_, other->flags_);
  addr_.Swap(&other->addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Sendto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Sendto_descriptor_;
  metadata.reflection = Request_Sendto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Poll::Request_Poll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Poll)
}

void Request_Poll::InitAsDefaultInstance() {
}

Request_Poll::Request_Poll(const Request_Poll& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Poll)
}

void Request_Poll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Poll::~Request_Poll() {
  // @@protoc_insertion_point(destructor:Request.Poll)
  SharedDtor();
}

void Request_Poll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Poll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Poll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Poll_descriptor_;
}

const Request_Poll& Request_Poll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Poll* Request_Poll::default_instance_ = NULL;

Request_Poll* Request_Poll::New(::google::protobuf::Arena* arena) const {
  Request_Poll* n = new Request_Poll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Poll::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Poll)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Poll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Poll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Poll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Poll)
  return false;
#undef DO_
}

void Request_Poll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Poll)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Poll)
}

::google::protobuf::uint8* Request_Poll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Poll)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Poll)
  return target;
}

int Request_Poll::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Poll)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Poll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Poll)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Poll* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Poll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Poll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Poll)
    MergeFrom(*source);
  }
}

void Request_Poll::MergeFrom(const Request_Poll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Poll)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Poll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Poll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Poll::CopyFrom(const Request_Poll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Poll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Poll::IsInitialized() const {

  return true;
}

void Request_Poll::Swap(Request_Poll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Poll::InternalSwap(Request_Poll* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Poll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Poll_descriptor_;
  metadata.reflection = Request_Poll_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Select::Request_Select()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Select)
}

void Request_Select::InitAsDefaultInstance() {
}

Request_Select::Request_Select(const Request_Select& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Select)
}

void Request_Select::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Select::~Request_Select() {
  // @@protoc_insertion_point(destructor:Request.Select)
  SharedDtor();
}

void Request_Select::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Select::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Select::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Select_descriptor_;
}

const Request_Select& Request_Select::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Select* Request_Select::default_instance_ = NULL;

Request_Select* Request_Select::New(::google::protobuf::Arena* arena) const {
  Request_Select* n = new Request_Select;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Select::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Select)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Select::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Select)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Select)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Select)
  return false;
#undef DO_
}

void Request_Select::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Select)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Select)
}

::google::protobuf::uint8* Request_Select::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Select)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Select)
  return target;
}

int Request_Select::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Select)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Select::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Select)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Select* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Select>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Select)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Select)
    MergeFrom(*source);
  }
}

void Request_Select::MergeFrom(const Request_Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Select)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Select::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Select::CopyFrom(const Request_Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Select::IsInitialized() const {

  return true;
}

void Request_Select::Swap(Request_Select* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Select::InternalSwap(Request_Select* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Select::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Select_descriptor_;
  metadata.reflection = Request_Select_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Getpeername::Request_Getpeername()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Getpeername)
}

void Request_Getpeername::InitAsDefaultInstance() {
}

Request_Getpeername::Request_Getpeername(const Request_Getpeername& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Getpeername)
}

void Request_Getpeername::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Getpeername::~Request_Getpeername() {
  // @@protoc_insertion_point(destructor:Request.Getpeername)
  SharedDtor();
}

void Request_Getpeername::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Getpeername::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Getpeername::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Getpeername_descriptor_;
}

const Request_Getpeername& Request_Getpeername::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Getpeername* Request_Getpeername::default_instance_ = NULL;

Request_Getpeername* Request_Getpeername::New(::google::protobuf::Arena* arena) const {
  Request_Getpeername* n = new Request_Getpeername;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Getpeername::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Getpeername)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Getpeername::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Getpeername)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Getpeername)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Getpeername)
  return false;
#undef DO_
}

void Request_Getpeername::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Getpeername)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Getpeername)
}

::google::protobuf::uint8* Request_Getpeername::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Getpeername)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Getpeername)
  return target;
}

int Request_Getpeername::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Getpeername)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Getpeername::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Getpeername)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Getpeername* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Getpeername>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Getpeername)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Getpeername)
    MergeFrom(*source);
  }
}

void Request_Getpeername::MergeFrom(const Request_Getpeername& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Getpeername)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Getpeername::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Getpeername)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Getpeername::CopyFrom(const Request_Getpeername& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Getpeername)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Getpeername::IsInitialized() const {

  return true;
}

void Request_Getpeername::Swap(Request_Getpeername* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Getpeername::InternalSwap(Request_Getpeername* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Getpeername::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Getpeername_descriptor_;
  metadata.reflection = Request_Getpeername_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Getsockname::Request_Getsockname()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Getsockname)
}

void Request_Getsockname::InitAsDefaultInstance() {
}

Request_Getsockname::Request_Getsockname(const Request_Getsockname& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Getsockname)
}

void Request_Getsockname::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Getsockname::~Request_Getsockname() {
  // @@protoc_insertion_point(destructor:Request.Getsockname)
  SharedDtor();
}

void Request_Getsockname::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Getsockname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Getsockname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Getsockname_descriptor_;
}

const Request_Getsockname& Request_Getsockname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Getsockname* Request_Getsockname::default_instance_ = NULL;

Request_Getsockname* Request_Getsockname::New(::google::protobuf::Arena* arena) const {
  Request_Getsockname* n = new Request_Getsockname;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Getsockname::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Getsockname)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Getsockname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Getsockname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Getsockname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Getsockname)
  return false;
#undef DO_
}

void Request_Getsockname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Getsockname)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Getsockname)
}

::google::protobuf::uint8* Request_Getsockname::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Getsockname)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Getsockname)
  return target;
}

int Request_Getsockname::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Getsockname)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Getsockname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Getsockname)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Getsockname* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Getsockname>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Getsockname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Getsockname)
    MergeFrom(*source);
  }
}

void Request_Getsockname::MergeFrom(const Request_Getsockname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Getsockname)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Getsockname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Getsockname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Getsockname::CopyFrom(const Request_Getsockname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Getsockname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Getsockname::IsInitialized() const {

  return true;
}

void Request_Getsockname::Swap(Request_Getsockname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Getsockname::InternalSwap(Request_Getsockname* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Getsockname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Getsockname_descriptor_;
  metadata.reflection = Request_Getsockname_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Getsockopt::Request_Getsockopt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Getsockopt)
}

void Request_Getsockopt::InitAsDefaultInstance() {
}

Request_Getsockopt::Request_Getsockopt(const Request_Getsockopt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Getsockopt)
}

void Request_Getsockopt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Getsockopt::~Request_Getsockopt() {
  // @@protoc_insertion_point(destructor:Request.Getsockopt)
  SharedDtor();
}

void Request_Getsockopt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Getsockopt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Getsockopt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Getsockopt_descriptor_;
}

const Request_Getsockopt& Request_Getsockopt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Getsockopt* Request_Getsockopt::default_instance_ = NULL;

Request_Getsockopt* Request_Getsockopt::New(::google::protobuf::Arena* arena) const {
  Request_Getsockopt* n = new Request_Getsockopt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Getsockopt::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Getsockopt)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Getsockopt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Getsockopt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Getsockopt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Getsockopt)
  return false;
#undef DO_
}

void Request_Getsockopt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Getsockopt)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Getsockopt)
}

::google::protobuf::uint8* Request_Getsockopt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Getsockopt)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Getsockopt)
  return target;
}

int Request_Getsockopt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Getsockopt)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Getsockopt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Getsockopt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Getsockopt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Getsockopt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Getsockopt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Getsockopt)
    MergeFrom(*source);
  }
}

void Request_Getsockopt::MergeFrom(const Request_Getsockopt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Getsockopt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Getsockopt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Getsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Getsockopt::CopyFrom(const Request_Getsockopt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Getsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Getsockopt::IsInitialized() const {

  return true;
}

void Request_Getsockopt::Swap(Request_Getsockopt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Getsockopt::InternalSwap(Request_Getsockopt* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Getsockopt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Getsockopt_descriptor_;
  metadata.reflection = Request_Getsockopt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Setsockopt::Request_Setsockopt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Setsockopt)
}

void Request_Setsockopt::InitAsDefaultInstance() {
}

Request_Setsockopt::Request_Setsockopt(const Request_Setsockopt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Setsockopt)
}

void Request_Setsockopt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Setsockopt::~Request_Setsockopt() {
  // @@protoc_insertion_point(destructor:Request.Setsockopt)
  SharedDtor();
}

void Request_Setsockopt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Setsockopt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Setsockopt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Setsockopt_descriptor_;
}

const Request_Setsockopt& Request_Setsockopt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Setsockopt* Request_Setsockopt::default_instance_ = NULL;

Request_Setsockopt* Request_Setsockopt::New(::google::protobuf::Arena* arena) const {
  Request_Setsockopt* n = new Request_Setsockopt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Setsockopt::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Setsockopt)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Setsockopt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Setsockopt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Setsockopt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Setsockopt)
  return false;
#undef DO_
}

void Request_Setsockopt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Setsockopt)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Setsockopt)
}

::google::protobuf::uint8* Request_Setsockopt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Setsockopt)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Setsockopt)
  return target;
}

int Request_Setsockopt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Setsockopt)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Setsockopt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Setsockopt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Setsockopt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Setsockopt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Setsockopt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Setsockopt)
    MergeFrom(*source);
  }
}

void Request_Setsockopt::MergeFrom(const Request_Setsockopt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Setsockopt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Setsockopt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Setsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Setsockopt::CopyFrom(const Request_Setsockopt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Setsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Setsockopt::IsInitialized() const {

  return true;
}

void Request_Setsockopt::Swap(Request_Setsockopt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Setsockopt::InternalSwap(Request_Setsockopt* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Setsockopt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Setsockopt_descriptor_;
  metadata.reflection = Request_Setsockopt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Fcntl::Request_Fcntl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Fcntl)
}

void Request_Fcntl::InitAsDefaultInstance() {
}

Request_Fcntl::Request_Fcntl(const Request_Fcntl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Fcntl)
}

void Request_Fcntl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Fcntl::~Request_Fcntl() {
  // @@protoc_insertion_point(destructor:Request.Fcntl)
  SharedDtor();
}

void Request_Fcntl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Fcntl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Fcntl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Fcntl_descriptor_;
}

const Request_Fcntl& Request_Fcntl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Fcntl* Request_Fcntl::default_instance_ = NULL;

Request_Fcntl* Request_Fcntl::New(::google::protobuf::Arena* arena) const {
  Request_Fcntl* n = new Request_Fcntl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Fcntl::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Fcntl)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Fcntl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Fcntl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Fcntl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Fcntl)
  return false;
#undef DO_
}

void Request_Fcntl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Fcntl)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Fcntl)
}

::google::protobuf::uint8* Request_Fcntl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Fcntl)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Fcntl)
  return target;
}

int Request_Fcntl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Fcntl)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Fcntl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Fcntl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Fcntl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Fcntl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Fcntl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Fcntl)
    MergeFrom(*source);
  }
}

void Request_Fcntl::MergeFrom(const Request_Fcntl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Fcntl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Fcntl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Fcntl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Fcntl::CopyFrom(const Request_Fcntl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Fcntl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Fcntl::IsInitialized() const {

  return true;
}

void Request_Fcntl::Swap(Request_Fcntl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Fcntl::InternalSwap(Request_Fcntl* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Fcntl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Fcntl_descriptor_;
  metadata.reflection = Request_Fcntl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Atstart::kPrognameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Atstart::Request_Atstart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Atstart)
}

void Request_Atstart::InitAsDefaultInstance() {
}

Request_Atstart::Request_Atstart(const Request_Atstart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request.Atstart)
}

void Request_Atstart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  progname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Atstart::~Request_Atstart() {
  // @@protoc_insertion_point(destructor:Request.Atstart)
  SharedDtor();
}

void Request_Atstart::SharedDtor() {
  progname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_Atstart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Atstart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Atstart_descriptor_;
}

const Request_Atstart& Request_Atstart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request_Atstart* Request_Atstart::default_instance_ = NULL;

Request_Atstart* Request_Atstart::New(::google::protobuf::Arena* arena) const {
  Request_Atstart* n = new Request_Atstart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Atstart::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Atstart)
  if (has_progname()) {
    progname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request_Atstart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request.Atstart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string progname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_progname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->progname().data(), this->progname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Request.Atstart.progname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request.Atstart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request.Atstart)
  return false;
#undef DO_
}

void Request_Atstart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request.Atstart)
  // required string progname = 1;
  if (has_progname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->progname().data(), this->progname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Request.Atstart.progname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->progname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request.Atstart)
}

::google::protobuf::uint8* Request_Atstart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Atstart)
  // required string progname = 1;
  if (has_progname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->progname().data(), this->progname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Request.Atstart.progname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->progname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Atstart)
  return target;
}

int Request_Atstart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Atstart)
  int total_size = 0;

  // required string progname = 1;
  if (has_progname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->progname());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Atstart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Atstart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_Atstart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Atstart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Atstart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Atstart)
    MergeFrom(*source);
  }
}

void Request_Atstart::MergeFrom(const Request_Atstart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Atstart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_progname()) {
      set_has_progname();
      progname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.progname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request_Atstart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Atstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Atstart::CopyFrom(const Request_Atstart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Atstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Atstart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_Atstart::Swap(Request_Atstart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Atstart::InternalSwap(Request_Atstart* other) {
  progname_.Swap(&other->progname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Atstart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Atstart_descriptor_;
  metadata.reflection = Request_Atstart_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kSocketCallFieldNumber;
const int Request::kConnectCallFieldNumber;
const int Request::kCloseCallFieldNumber;
const int Request::kRecvfromCallFieldNumber;
const int Request::kSendtoCallFieldNumber;
const int Request::kPollCallFieldNumber;
const int Request::kSelectCallFieldNumber;
const int Request::kGetpeernameCallFieldNumber;
const int Request::kGetsocknameCallFieldNumber;
const int Request::kGetsockoptCallFieldNumber;
const int Request::kSetsockoptCallFieldNumber;
const int Request::kFcntlCallFieldNumber;
const int Request::kAtstartActionFieldNumber;
const int Request::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->socketcall_ = const_cast< ::Request_Socket*>(&::Request_Socket::default_instance());
  Request_default_oneof_instance_->connectcall_ = const_cast< ::Request_Connect*>(&::Request_Connect::default_instance());
  Request_default_oneof_instance_->closecall_ = const_cast< ::Request_Close*>(&::Request_Close::default_instance());
  Request_default_oneof_instance_->recvfromcall_ = const_cast< ::Request_Recvfrom*>(&::Request_Recvfrom::default_instance());
  Request_default_oneof_instance_->sendtocall_ = const_cast< ::Request_Sendto*>(&::Request_Sendto::default_instance());
  Request_default_oneof_instance_->pollcall_ = const_cast< ::Request_Poll*>(&::Request_Poll::default_instance());
  Request_default_oneof_instance_->selectcall_ = const_cast< ::Request_Select*>(&::Request_Select::default_instance());
  Request_default_oneof_instance_->getpeernamecall_ = const_cast< ::Request_Getpeername*>(&::Request_Getpeername::default_instance());
  Request_default_oneof_instance_->getsocknamecall_ = const_cast< ::Request_Getsockname*>(&::Request_Getsockname::default_instance());
  Request_default_oneof_instance_->getsockoptcall_ = const_cast< ::Request_Getsockopt*>(&::Request_Getsockopt::default_instance());
  Request_default_oneof_instance_->setsockoptcall_ = const_cast< ::Request_Setsockopt*>(&::Request_Setsockopt::default_instance());
  Request_default_oneof_instance_->fcntlcall_ = const_cast< ::Request_Fcntl*>(&::Request_Fcntl::default_instance());
  Request_default_oneof_instance_->atstartaction_ = const_cast< ::Request_Atstart*>(&::Request_Atstart::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_calling();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_calling()) {
    clear_calling();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_calling() {
// @@protoc_insertion_point(one_of_clear_start:Request)
  switch(calling_case()) {
    case kSocketCall: {
      delete calling_.socketcall_;
      break;
    }
    case kConnectCall: {
      delete calling_.connectcall_;
      break;
    }
    case kCloseCall: {
      delete calling_.closecall_;
      break;
    }
    case kRecvfromCall: {
      delete calling_.recvfromcall_;
      break;
    }
    case kSendtoCall: {
      delete calling_.sendtocall_;
      break;
    }
    case kPollCall: {
      delete calling_.pollcall_;
      break;
    }
    case kSelectCall: {
      delete calling_.selectcall_;
      break;
    }
    case kGetpeernameCall: {
      delete calling_.getpeernamecall_;
      break;
    }
    case kGetsocknameCall: {
      delete calling_.getsocknamecall_;
      break;
    }
    case kGetsockoptCall: {
      delete calling_.getsockoptcall_;
      break;
    }
    case kSetsockoptCall: {
      delete calling_.setsockoptcall_;
      break;
    }
    case kFcntlCall: {
      delete calling_.fcntlcall_;
      break;
    }
    case kAtstartAction: {
      delete calling_.atstartaction_;
      break;
    }
    case CALLING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CALLING_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Request)
  pid_ = GOOGLE_ULONGLONG(0);
  clear_calling();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Request.Socket socketCall = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socketcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_connectCall;
        break;
      }

      // optional .Request.Connect connectCall = 2;
      case 2: {
        if (tag == 18) {
         parse_connectCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_closeCall;
        break;
      }

      // optional .Request.Close closeCall = 3;
      case 3: {
        if (tag == 26) {
         parse_closeCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closecall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recvfromCall;
        break;
      }

      // optional .Request.Recvfrom recvfromCall = 4;
      case 4: {
        if (tag == 34) {
         parse_recvfromCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvfromcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sendtoCall;
        break;
      }

      // optional .Request.Sendto sendtoCall = 5;
      case 5: {
        if (tag == 42) {
         parse_sendtoCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendtocall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pollCall;
        break;
      }

      // optional .Request.Poll pollCall = 6;
      case 6: {
        if (tag == 50) {
         parse_pollCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pollcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_selectCall;
        break;
      }

      // optional .Request.Select selectCall = 7;
      case 7: {
        if (tag == 58) {
         parse_selectCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_getpeernameCall;
        break;
      }

      // optional .Request.Getpeername getpeernameCall = 8;
      case 8: {
        if (tag == 66) {
         parse_getpeernameCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpeernamecall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_getsocknameCall;
        break;
      }

      // optional .Request.Getsockname getsocknameCall = 9;
      case 9: {
        if (tag == 74) {
         parse_getsocknameCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsocknamecall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_getsockoptCall;
        break;
      }

      // optional .Request.Getsockopt getsockoptCall = 10;
      case 10: {
        if (tag == 82) {
         parse_getsockoptCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsockoptcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_setsockoptCall;
        break;
      }

      // optional .Request.Setsockopt setsockoptCall = 11;
      case 11: {
        if (tag == 90) {
         parse_setsockoptCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsockoptcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fcntlCall;
        break;
      }

      // optional .Request.Fcntl fcntlCall = 12;
      case 12: {
        if (tag == 98) {
         parse_fcntlCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcntlcall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_pid;
        break;
      }

      // required uint64 pid = 15;
      case 15: {
        if (tag == 120) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_atstartAction;
        break;
      }

      // optional .Request.Atstart atstartAction = 16;
      case 16: {
        if (tag == 130) {
         parse_atstartAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atstartaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  // optional .Request.Socket socketCall = 1;
  if (has_socketcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *calling_.socketcall_, output);
  }

  // optional .Request.Connect connectCall = 2;
  if (has_connectcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *calling_.connectcall_, output);
  }

  // optional .Request.Close closeCall = 3;
  if (has_closecall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *calling_.closecall_, output);
  }

  // optional .Request.Recvfrom recvfromCall = 4;
  if (has_recvfromcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *calling_.recvfromcall_, output);
  }

  // optional .Request.Sendto sendtoCall = 5;
  if (has_sendtocall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *calling_.sendtocall_, output);
  }

  // optional .Request.Poll pollCall = 6;
  if (has_pollcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *calling_.pollcall_, output);
  }

  // optional .Request.Select selectCall = 7;
  if (has_selectcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *calling_.selectcall_, output);
  }

  // optional .Request.Getpeername getpeernameCall = 8;
  if (has_getpeernamecall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *calling_.getpeernamecall_, output);
  }

  // optional .Request.Getsockname getsocknameCall = 9;
  if (has_getsocknamecall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *calling_.getsocknamecall_, output);
  }

  // optional .Request.Getsockopt getsockoptCall = 10;
  if (has_getsockoptcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *calling_.getsockoptcall_, output);
  }

  // optional .Request.Setsockopt setsockoptCall = 11;
  if (has_setsockoptcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *calling_.setsockoptcall_, output);
  }

  // optional .Request.Fcntl fcntlCall = 12;
  if (has_fcntlcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *calling_.fcntlcall_, output);
  }

  // required uint64 pid = 15;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->pid(), output);
  }

  // optional .Request.Atstart atstartAction = 16;
  if (has_atstartaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *calling_.atstartaction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  // optional .Request.Socket socketCall = 1;
  if (has_socketcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *calling_.socketcall_, false, target);
  }

  // optional .Request.Connect connectCall = 2;
  if (has_connectcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *calling_.connectcall_, false, target);
  }

  // optional .Request.Close closeCall = 3;
  if (has_closecall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *calling_.closecall_, false, target);
  }

  // optional .Request.Recvfrom recvfromCall = 4;
  if (has_recvfromcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *calling_.recvfromcall_, false, target);
  }

  // optional .Request.Sendto sendtoCall = 5;
  if (has_sendtocall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *calling_.sendtocall_, false, target);
  }

  // optional .Request.Poll pollCall = 6;
  if (has_pollcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *calling_.pollcall_, false, target);
  }

  // optional .Request.Select selectCall = 7;
  if (has_selectcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *calling_.selectcall_, false, target);
  }

  // optional .Request.Getpeername getpeernameCall = 8;
  if (has_getpeernamecall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *calling_.getpeernamecall_, false, target);
  }

  // optional .Request.Getsockname getsocknameCall = 9;
  if (has_getsocknamecall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *calling_.getsocknamecall_, false, target);
  }

  // optional .Request.Getsockopt getsockoptCall = 10;
  if (has_getsockoptcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *calling_.getsockoptcall_, false, target);
  }

  // optional .Request.Setsockopt setsockoptCall = 11;
  if (has_setsockoptcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *calling_.setsockoptcall_, false, target);
  }

  // optional .Request.Fcntl fcntlCall = 12;
  if (has_fcntlcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *calling_.fcntlcall_, false, target);
  }

  // required uint64 pid = 15;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->pid(), target);
  }

  // optional .Request.Atstart atstartAction = 16;
  if (has_atstartaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *calling_.atstartaction_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Request)
  int total_size = 0;

  // required uint64 pid = 15;
  if (has_pid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());
  }
  switch (calling_case()) {
    // optional .Request.Socket socketCall = 1;
    case kSocketCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.socketcall_);
      break;
    }
    // optional .Request.Connect connectCall = 2;
    case kConnectCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.connectcall_);
      break;
    }
    // optional .Request.Close closeCall = 3;
    case kCloseCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.closecall_);
      break;
    }
    // optional .Request.Recvfrom recvfromCall = 4;
    case kRecvfromCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.recvfromcall_);
      break;
    }
    // optional .Request.Sendto sendtoCall = 5;
    case kSendtoCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.sendtocall_);
      break;
    }
    // optional .Request.Poll pollCall = 6;
    case kPollCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.pollcall_);
      break;
    }
    // optional .Request.Select selectCall = 7;
    case kSelectCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.selectcall_);
      break;
    }
    // optional .Request.Getpeername getpeernameCall = 8;
    case kGetpeernameCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.getpeernamecall_);
      break;
    }
    // optional .Request.Getsockname getsocknameCall = 9;
    case kGetsocknameCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.getsocknamecall_);
      break;
    }
    // optional .Request.Getsockopt getsockoptCall = 10;
    case kGetsockoptCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.getsockoptcall_);
      break;
    }
    // optional .Request.Setsockopt setsockoptCall = 11;
    case kSetsockoptCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.setsockoptcall_);
      break;
    }
    // optional .Request.Fcntl fcntlCall = 12;
    case kFcntlCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.fcntlcall_);
      break;
    }
    // optional .Request.Atstart atstartAction = 16;
    case kAtstartAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *calling_.atstartaction_);
      break;
    }
    case CALLING_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.calling_case()) {
    case kSocketCall: {
      mutable_socketcall()->::Request_Socket::MergeFrom(from.socketcall());
      break;
    }
    case kConnectCall: {
      mutable_connectcall()->::Request_Connect::MergeFrom(from.connectcall());
      break;
    }
    case kCloseCall: {
      mutable_closecall()->::Request_Close::MergeFrom(from.closecall());
      break;
    }
    case kRecvfromCall: {
      mutable_recvfromcall()->::Request_Recvfrom::MergeFrom(from.recvfromcall());
      break;
    }
    case kSendtoCall: {
      mutable_sendtocall()->::Request_Sendto::MergeFrom(from.sendtocall());
      break;
    }
    case kPollCall: {
      mutable_pollcall()->::Request_Poll::MergeFrom(from.pollcall());
      break;
    }
    case kSelectCall: {
      mutable_selectcall()->::Request_Select::MergeFrom(from.selectcall());
      break;
    }
    case kGetpeernameCall: {
      mutable_getpeernamecall()->::Request_Getpeername::MergeFrom(from.getpeernamecall());
      break;
    }
    case kGetsocknameCall: {
      mutable_getsocknamecall()->::Request_Getsockname::MergeFrom(from.getsocknamecall());
      break;
    }
    case kGetsockoptCall: {
      mutable_getsockoptcall()->::Request_Getsockopt::MergeFrom(from.getsockoptcall());
      break;
    }
    case kSetsockoptCall: {
      mutable_setsockoptcall()->::Request_Setsockopt::MergeFrom(from.setsockoptcall());
      break;
    }
    case kFcntlCall: {
      mutable_fcntlcall()->::Request_Fcntl::MergeFrom(from.fcntlcall());
      break;
    }
    case kAtstartAction: {
      mutable_atstartaction()->::Request_Atstart::MergeFrom(from.atstartaction());
      break;
    }
    case CALLING_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[13 / 32] & (0xffu << (13 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002000) != 0x00002000) return false;

  if (has_socketcall()) {
    if (!this->socketcall().IsInitialized()) return false;
  }
  if (has_connectcall()) {
    if (!this->connectcall().IsInitialized()) return false;
  }
  if (has_recvfromcall()) {
    if (!this->recvfromcall().IsInitialized()) return false;
  }
  if (has_sendtocall()) {
    if (!this->sendtocall().IsInitialized()) return false;
  }
  if (has_atstartaction()) {
    if (!this->atstartaction().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(pid_, other->pid_);
  std::swap(calling_, other->calling_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_Socket

// required int32 domain = 1;
bool Request_Socket::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_Socket::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_Socket::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_Socket::clear_domain() {
  domain_ = 0;
  clear_has_domain();
}
 ::google::protobuf::int32 Request_Socket::domain() const {
  // @@protoc_insertion_point(field_get:Request.Socket.domain)
  return domain_;
}
 void Request_Socket::set_domain(::google::protobuf::int32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:Request.Socket.domain)
}

// required int32 type = 2;
bool Request_Socket::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_Socket::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_Socket::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_Socket::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 Request_Socket::type() const {
  // @@protoc_insertion_point(field_get:Request.Socket.type)
  return type_;
}
 void Request_Socket::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Request.Socket.type)
}

// required int32 protocol = 3;
bool Request_Socket::has_protocol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_Socket::set_has_protocol() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_Socket::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_Socket::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
 ::google::protobuf::int32 Request_Socket::protocol() const {
  // @@protoc_insertion_point(field_get:Request.Socket.protocol)
  return protocol_;
}
 void Request_Socket::set_protocol(::google::protobuf::int32 value) {
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:Request.Socket.protocol)
}

// -------------------------------------------------------------------

// Request_Connect

// required bytes addr = 1;
bool Request_Connect::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_Connect::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_Connect::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_Connect::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& Request_Connect::addr() const {
  // @@protoc_insertion_point(field_get:Request.Connect.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Connect::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.Connect.addr)
}
 void Request_Connect::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.Connect.addr)
}
 void Request_Connect::set_addr(const void* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.Connect.addr)
}
 ::std::string* Request_Connect::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:Request.Connect.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_Connect::release_addr() {
  // @@protoc_insertion_point(field_release:Request.Connect.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Connect::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:Request.Connect.addr)
}

// -------------------------------------------------------------------

// Request_Close

// -------------------------------------------------------------------

// Request_Recvfrom

// required int32 len = 1;
bool Request_Recvfrom::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_Recvfrom::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_Recvfrom::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_Recvfrom::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::google::protobuf::int32 Request_Recvfrom::len() const {
  // @@protoc_insertion_point(field_get:Request.Recvfrom.len)
  return len_;
}
 void Request_Recvfrom::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Request.Recvfrom.len)
}

// required int32 flags = 2;
bool Request_Recvfrom::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_Recvfrom::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_Recvfrom::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_Recvfrom::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
 ::google::protobuf::int32 Request_Recvfrom::flags() const {
  // @@protoc_insertion_point(field_get:Request.Recvfrom.flags)
  return flags_;
}
 void Request_Recvfrom::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Request.Recvfrom.flags)
}

// required bool requireAddr = 3;
bool Request_Recvfrom::has_requireaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_Recvfrom::set_has_requireaddr() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_Recvfrom::clear_has_requireaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_Recvfrom::clear_requireaddr() {
  requireaddr_ = false;
  clear_has_requireaddr();
}
 bool Request_Recvfrom::requireaddr() const {
  // @@protoc_insertion_point(field_get:Request.Recvfrom.requireAddr)
  return requireaddr_;
}
 void Request_Recvfrom::set_requireaddr(bool value) {
  set_has_requireaddr();
  requireaddr_ = value;
  // @@protoc_insertion_point(field_set:Request.Recvfrom.requireAddr)
}

// -------------------------------------------------------------------

// Request_Sendto

// required bytes buf = 1;
bool Request_Sendto::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_Sendto::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_Sendto::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_Sendto::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buf();
}
 const ::std::string& Request_Sendto::buf() const {
  // @@protoc_insertion_point(field_get:Request.Sendto.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Sendto::set_buf(const ::std::string& value) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.Sendto.buf)
}
 void Request_Sendto::set_buf(const char* value) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.Sendto.buf)
}
 void Request_Sendto::set_buf(const void* value, size_t size) {
  set_has_buf();
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.Sendto.buf)
}
 ::std::string* Request_Sendto::mutable_buf() {
  set_has_buf();
  // @@protoc_insertion_point(field_mutable:Request.Sendto.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_Sendto::release_buf() {
  // @@protoc_insertion_point(field_release:Request.Sendto.buf)
  clear_has_buf();
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Sendto::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:Request.Sendto.buf)
}

// required int32 flags = 2;
bool Request_Sendto::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request_Sendto::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void Request_Sendto::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request_Sendto::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
 ::google::protobuf::int32 Request_Sendto::flags() const {
  // @@protoc_insertion_point(field_get:Request.Sendto.flags)
  return flags_;
}
 void Request_Sendto::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Request.Sendto.flags)
}

// optional bytes addr = 3;
bool Request_Sendto::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request_Sendto::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void Request_Sendto::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request_Sendto::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& Request_Sendto::addr() const {
  // @@protoc_insertion_point(field_get:Request.Sendto.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Sendto::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.Sendto.addr)
}
 void Request_Sendto::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.Sendto.addr)
}
 void Request_Sendto::set_addr(const void* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.Sendto.addr)
}
 ::std::string* Request_Sendto::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:Request.Sendto.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_Sendto::release_addr() {
  // @@protoc_insertion_point(field_release:Request.Sendto.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Sendto::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:Request.Sendto.addr)
}

// -------------------------------------------------------------------

// Request_Poll

// -------------------------------------------------------------------

// Request_Select

// -------------------------------------------------------------------

// Request_Getpeername

// -------------------------------------------------------------------

// Request_Getsockname

// -------------------------------------------------------------------

// Request_Getsockopt

// -------------------------------------------------------------------

// Request_Setsockopt

// -------------------------------------------------------------------

// Request_Fcntl

// -------------------------------------------------------------------

// Request_Atstart

// required string progname = 1;
bool Request_Atstart::has_progname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request_Atstart::set_has_progname() {
  _has_bits_[0] |= 0x00000001u;
}
void Request_Atstart::clear_has_progname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request_Atstart::clear_progname() {
  progname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_progname();
}
 const ::std::string& Request_Atstart::progname() const {
  // @@protoc_insertion_point(field_get:Request.Atstart.progname)
  return progname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Atstart::set_progname(const ::std::string& value) {
  set_has_progname();
  progname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.Atstart.progname)
}
 void Request_Atstart::set_progname(const char* value) {
  set_has_progname();
  progname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.Atstart.progname)
}
 void Request_Atstart::set_progname(const char* value, size_t size) {
  set_has_progname();
  progname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.Atstart.progname)
}
 ::std::string* Request_Atstart::mutable_progname() {
  set_has_progname();
  // @@protoc_insertion_point(field_mutable:Request.Atstart.progname)
  return progname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_Atstart::release_progname() {
  // @@protoc_insertion_point(field_release:Request.Atstart.progname)
  clear_has_progname();
  return progname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_Atstart::set_allocated_progname(::std::string* progname) {
  if (progname != NULL) {
    set_has_progname();
  } else {
    clear_has_progname();
  }
  progname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), progname);
  // @@protoc_insertion_point(field_set_allocated:Request.Atstart.progname)
}

// -------------------------------------------------------------------

// Request

// optional .Request.Socket socketCall = 1;
bool Request::has_socketcall() const {
  return calling_case() == kSocketCall;
}
void Request::set_has_socketcall() {
  _oneof_case_[0] = kSocketCall;
}
void Request::clear_socketcall() {
  if (has_socketcall()) {
    delete calling_.socketcall_;
    clear_has_calling();
  }
}
 const ::Request_Socket& Request::socketcall() const {
  // @@protoc_insertion_point(field_get:Request.socketCall)
  return has_socketcall()
      ? *calling_.socketcall_
      : ::Request_Socket::default_instance();
}
::Request_Socket* Request::mutable_socketcall() {
  if (!has_socketcall()) {
    clear_calling();
    set_has_socketcall();
    calling_.socketcall_ = new ::Request_Socket;
  }
  // @@protoc_insertion_point(field_mutable:Request.socketCall)
  return calling_.socketcall_;
}
::Request_Socket* Request::release_socketcall() {
  // @@protoc_insertion_point(field_release:Request.socketCall)
  if (has_socketcall()) {
    clear_has_calling();
    ::Request_Socket* temp = calling_.socketcall_;
    calling_.socketcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_socketcall(::Request_Socket* socketcall) {
  clear_calling();
  if (socketcall) {
    set_has_socketcall();
    calling_.socketcall_ = socketcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.socketCall)
}

// optional .Request.Connect connectCall = 2;
bool Request::has_connectcall() const {
  return calling_case() == kConnectCall;
}
void Request::set_has_connectcall() {
  _oneof_case_[0] = kConnectCall;
}
void Request::clear_connectcall() {
  if (has_connectcall()) {
    delete calling_.connectcall_;
    clear_has_calling();
  }
}
 const ::Request_Connect& Request::connectcall() const {
  // @@protoc_insertion_point(field_get:Request.connectCall)
  return has_connectcall()
      ? *calling_.connectcall_
      : ::Request_Connect::default_instance();
}
::Request_Connect* Request::mutable_connectcall() {
  if (!has_connectcall()) {
    clear_calling();
    set_has_connectcall();
    calling_.connectcall_ = new ::Request_Connect;
  }
  // @@protoc_insertion_point(field_mutable:Request.connectCall)
  return calling_.connectcall_;
}
::Request_Connect* Request::release_connectcall() {
  // @@protoc_insertion_point(field_release:Request.connectCall)
  if (has_connectcall()) {
    clear_has_calling();
    ::Request_Connect* temp = calling_.connectcall_;
    calling_.connectcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_connectcall(::Request_Connect* connectcall) {
  clear_calling();
  if (connectcall) {
    set_has_connectcall();
    calling_.connectcall_ = connectcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.connectCall)
}

// optional .Request.Close closeCall = 3;
bool Request::has_closecall() const {
  return calling_case() == kCloseCall;
}
void Request::set_has_closecall() {
  _oneof_case_[0] = kCloseCall;
}
void Request::clear_closecall() {
  if (has_closecall()) {
    delete calling_.closecall_;
    clear_has_calling();
  }
}
 const ::Request_Close& Request::closecall() const {
  // @@protoc_insertion_point(field_get:Request.closeCall)
  return has_closecall()
      ? *calling_.closecall_
      : ::Request_Close::default_instance();
}
::Request_Close* Request::mutable_closecall() {
  if (!has_closecall()) {
    clear_calling();
    set_has_closecall();
    calling_.closecall_ = new ::Request_Close;
  }
  // @@protoc_insertion_point(field_mutable:Request.closeCall)
  return calling_.closecall_;
}
::Request_Close* Request::release_closecall() {
  // @@protoc_insertion_point(field_release:Request.closeCall)
  if (has_closecall()) {
    clear_has_calling();
    ::Request_Close* temp = calling_.closecall_;
    calling_.closecall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_closecall(::Request_Close* closecall) {
  clear_calling();
  if (closecall) {
    set_has_closecall();
    calling_.closecall_ = closecall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.closeCall)
}

// optional .Request.Recvfrom recvfromCall = 4;
bool Request::has_recvfromcall() const {
  return calling_case() == kRecvfromCall;
}
void Request::set_has_recvfromcall() {
  _oneof_case_[0] = kRecvfromCall;
}
void Request::clear_recvfromcall() {
  if (has_recvfromcall()) {
    delete calling_.recvfromcall_;
    clear_has_calling();
  }
}
 const ::Request_Recvfrom& Request::recvfromcall() const {
  // @@protoc_insertion_point(field_get:Request.recvfromCall)
  return has_recvfromcall()
      ? *calling_.recvfromcall_
      : ::Request_Recvfrom::default_instance();
}
::Request_Recvfrom* Request::mutable_recvfromcall() {
  if (!has_recvfromcall()) {
    clear_calling();
    set_has_recvfromcall();
    calling_.recvfromcall_ = new ::Request_Recvfrom;
  }
  // @@protoc_insertion_point(field_mutable:Request.recvfromCall)
  return calling_.recvfromcall_;
}
::Request_Recvfrom* Request::release_recvfromcall() {
  // @@protoc_insertion_point(field_release:Request.recvfromCall)
  if (has_recvfromcall()) {
    clear_has_calling();
    ::Request_Recvfrom* temp = calling_.recvfromcall_;
    calling_.recvfromcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_recvfromcall(::Request_Recvfrom* recvfromcall) {
  clear_calling();
  if (recvfromcall) {
    set_has_recvfromcall();
    calling_.recvfromcall_ = recvfromcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.recvfromCall)
}

// optional .Request.Sendto sendtoCall = 5;
bool Request::has_sendtocall() const {
  return calling_case() == kSendtoCall;
}
void Request::set_has_sendtocall() {
  _oneof_case_[0] = kSendtoCall;
}
void Request::clear_sendtocall() {
  if (has_sendtocall()) {
    delete calling_.sendtocall_;
    clear_has_calling();
  }
}
 const ::Request_Sendto& Request::sendtocall() const {
  // @@protoc_insertion_point(field_get:Request.sendtoCall)
  return has_sendtocall()
      ? *calling_.sendtocall_
      : ::Request_Sendto::default_instance();
}
::Request_Sendto* Request::mutable_sendtocall() {
  if (!has_sendtocall()) {
    clear_calling();
    set_has_sendtocall();
    calling_.sendtocall_ = new ::Request_Sendto;
  }
  // @@protoc_insertion_point(field_mutable:Request.sendtoCall)
  return calling_.sendtocall_;
}
::Request_Sendto* Request::release_sendtocall() {
  // @@protoc_insertion_point(field_release:Request.sendtoCall)
  if (has_sendtocall()) {
    clear_has_calling();
    ::Request_Sendto* temp = calling_.sendtocall_;
    calling_.sendtocall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_sendtocall(::Request_Sendto* sendtocall) {
  clear_calling();
  if (sendtocall) {
    set_has_sendtocall();
    calling_.sendtocall_ = sendtocall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.sendtoCall)
}

// optional .Request.Poll pollCall = 6;
bool Request::has_pollcall() const {
  return calling_case() == kPollCall;
}
void Request::set_has_pollcall() {
  _oneof_case_[0] = kPollCall;
}
void Request::clear_pollcall() {
  if (has_pollcall()) {
    delete calling_.pollcall_;
    clear_has_calling();
  }
}
 const ::Request_Poll& Request::pollcall() const {
  // @@protoc_insertion_point(field_get:Request.pollCall)
  return has_pollcall()
      ? *calling_.pollcall_
      : ::Request_Poll::default_instance();
}
::Request_Poll* Request::mutable_pollcall() {
  if (!has_pollcall()) {
    clear_calling();
    set_has_pollcall();
    calling_.pollcall_ = new ::Request_Poll;
  }
  // @@protoc_insertion_point(field_mutable:Request.pollCall)
  return calling_.pollcall_;
}
::Request_Poll* Request::release_pollcall() {
  // @@protoc_insertion_point(field_release:Request.pollCall)
  if (has_pollcall()) {
    clear_has_calling();
    ::Request_Poll* temp = calling_.pollcall_;
    calling_.pollcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_pollcall(::Request_Poll* pollcall) {
  clear_calling();
  if (pollcall) {
    set_has_pollcall();
    calling_.pollcall_ = pollcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.pollCall)
}

// optional .Request.Select selectCall = 7;
bool Request::has_selectcall() const {
  return calling_case() == kSelectCall;
}
void Request::set_has_selectcall() {
  _oneof_case_[0] = kSelectCall;
}
void Request::clear_selectcall() {
  if (has_selectcall()) {
    delete calling_.selectcall_;
    clear_has_calling();
  }
}
 const ::Request_Select& Request::selectcall() const {
  // @@protoc_insertion_point(field_get:Request.selectCall)
  return has_selectcall()
      ? *calling_.selectcall_
      : ::Request_Select::default_instance();
}
::Request_Select* Request::mutable_selectcall() {
  if (!has_selectcall()) {
    clear_calling();
    set_has_selectcall();
    calling_.selectcall_ = new ::Request_Select;
  }
  // @@protoc_insertion_point(field_mutable:Request.selectCall)
  return calling_.selectcall_;
}
::Request_Select* Request::release_selectcall() {
  // @@protoc_insertion_point(field_release:Request.selectCall)
  if (has_selectcall()) {
    clear_has_calling();
    ::Request_Select* temp = calling_.selectcall_;
    calling_.selectcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_selectcall(::Request_Select* selectcall) {
  clear_calling();
  if (selectcall) {
    set_has_selectcall();
    calling_.selectcall_ = selectcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.selectCall)
}

// optional .Request.Getpeername getpeernameCall = 8;
bool Request::has_getpeernamecall() const {
  return calling_case() == kGetpeernameCall;
}
void Request::set_has_getpeernamecall() {
  _oneof_case_[0] = kGetpeernameCall;
}
void Request::clear_getpeernamecall() {
  if (has_getpeernamecall()) {
    delete calling_.getpeernamecall_;
    clear_has_calling();
  }
}
 const ::Request_Getpeername& Request::getpeernamecall() const {
  // @@protoc_insertion_point(field_get:Request.getpeernameCall)
  return has_getpeernamecall()
      ? *calling_.getpeernamecall_
      : ::Request_Getpeername::default_instance();
}
::Request_Getpeername* Request::mutable_getpeernamecall() {
  if (!has_getpeernamecall()) {
    clear_calling();
    set_has_getpeernamecall();
    calling_.getpeernamecall_ = new ::Request_Getpeername;
  }
  // @@protoc_insertion_point(field_mutable:Request.getpeernameCall)
  return calling_.getpeernamecall_;
}
::Request_Getpeername* Request::release_getpeernamecall() {
  // @@protoc_insertion_point(field_release:Request.getpeernameCall)
  if (has_getpeernamecall()) {
    clear_has_calling();
    ::Request_Getpeername* temp = calling_.getpeernamecall_;
    calling_.getpeernamecall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_getpeernamecall(::Request_Getpeername* getpeernamecall) {
  clear_calling();
  if (getpeernamecall) {
    set_has_getpeernamecall();
    calling_.getpeernamecall_ = getpeernamecall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.getpeernameCall)
}

// optional .Request.Getsockname getsocknameCall = 9;
bool Request::has_getsocknamecall() const {
  return calling_case() == kGetsocknameCall;
}
void Request::set_has_getsocknamecall() {
  _oneof_case_[0] = kGetsocknameCall;
}
void Request::clear_getsocknamecall() {
  if (has_getsocknamecall()) {
    delete calling_.getsocknamecall_;
    clear_has_calling();
  }
}
 const ::Request_Getsockname& Request::getsocknamecall() const {
  // @@protoc_insertion_point(field_get:Request.getsocknameCall)
  return has_getsocknamecall()
      ? *calling_.getsocknamecall_
      : ::Request_Getsockname::default_instance();
}
::Request_Getsockname* Request::mutable_getsocknamecall() {
  if (!has_getsocknamecall()) {
    clear_calling();
    set_has_getsocknamecall();
    calling_.getsocknamecall_ = new ::Request_Getsockname;
  }
  // @@protoc_insertion_point(field_mutable:Request.getsocknameCall)
  return calling_.getsocknamecall_;
}
::Request_Getsockname* Request::release_getsocknamecall() {
  // @@protoc_insertion_point(field_release:Request.getsocknameCall)
  if (has_getsocknamecall()) {
    clear_has_calling();
    ::Request_Getsockname* temp = calling_.getsocknamecall_;
    calling_.getsocknamecall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_getsocknamecall(::Request_Getsockname* getsocknamecall) {
  clear_calling();
  if (getsocknamecall) {
    set_has_getsocknamecall();
    calling_.getsocknamecall_ = getsocknamecall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.getsocknameCall)
}

// optional .Request.Getsockopt getsockoptCall = 10;
bool Request::has_getsockoptcall() const {
  return calling_case() == kGetsockoptCall;
}
void Request::set_has_getsockoptcall() {
  _oneof_case_[0] = kGetsockoptCall;
}
void Request::clear_getsockoptcall() {
  if (has_getsockoptcall()) {
    delete calling_.getsockoptcall_;
    clear_has_calling();
  }
}
 const ::Request_Getsockopt& Request::getsockoptcall() const {
  // @@protoc_insertion_point(field_get:Request.getsockoptCall)
  return has_getsockoptcall()
      ? *calling_.getsockoptcall_
      : ::Request_Getsockopt::default_instance();
}
::Request_Getsockopt* Request::mutable_getsockoptcall() {
  if (!has_getsockoptcall()) {
    clear_calling();
    set_has_getsockoptcall();
    calling_.getsockoptcall_ = new ::Request_Getsockopt;
  }
  // @@protoc_insertion_point(field_mutable:Request.getsockoptCall)
  return calling_.getsockoptcall_;
}
::Request_Getsockopt* Request::release_getsockoptcall() {
  // @@protoc_insertion_point(field_release:Request.getsockoptCall)
  if (has_getsockoptcall()) {
    clear_has_calling();
    ::Request_Getsockopt* temp = calling_.getsockoptcall_;
    calling_.getsockoptcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_getsockoptcall(::Request_Getsockopt* getsockoptcall) {
  clear_calling();
  if (getsockoptcall) {
    set_has_getsockoptcall();
    calling_.getsockoptcall_ = getsockoptcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.getsockoptCall)
}

// optional .Request.Setsockopt setsockoptCall = 11;
bool Request::has_setsockoptcall() const {
  return calling_case() == kSetsockoptCall;
}
void Request::set_has_setsockoptcall() {
  _oneof_case_[0] = kSetsockoptCall;
}
void Request::clear_setsockoptcall() {
  if (has_setsockoptcall()) {
    delete calling_.setsockoptcall_;
    clear_has_calling();
  }
}
 const ::Request_Setsockopt& Request::setsockoptcall() const {
  // @@protoc_insertion_point(field_get:Request.setsockoptCall)
  return has_setsockoptcall()
      ? *calling_.setsockoptcall_
      : ::Request_Setsockopt::default_instance();
}
::Request_Setsockopt* Request::mutable_setsockoptcall() {
  if (!has_setsockoptcall()) {
    clear_calling();
    set_has_setsockoptcall();
    calling_.setsockoptcall_ = new ::Request_Setsockopt;
  }
  // @@protoc_insertion_point(field_mutable:Request.setsockoptCall)
  return calling_.setsockoptcall_;
}
::Request_Setsockopt* Request::release_setsockoptcall() {
  // @@protoc_insertion_point(field_release:Request.setsockoptCall)
  if (has_setsockoptcall()) {
    clear_has_calling();
    ::Request_Setsockopt* temp = calling_.setsockoptcall_;
    calling_.setsockoptcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_setsockoptcall(::Request_Setsockopt* setsockoptcall) {
  clear_calling();
  if (setsockoptcall) {
    set_has_setsockoptcall();
    calling_.setsockoptcall_ = setsockoptcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.setsockoptCall)
}

// optional .Request.Fcntl fcntlCall = 12;
bool Request::has_fcntlcall() const {
  return calling_case() == kFcntlCall;
}
void Request::set_has_fcntlcall() {
  _oneof_case_[0] = kFcntlCall;
}
void Request::clear_fcntlcall() {
  if (has_fcntlcall()) {
    delete calling_.fcntlcall_;
    clear_has_calling();
  }
}
 const ::Request_Fcntl& Request::fcntlcall() const {
  // @@protoc_insertion_point(field_get:Request.fcntlCall)
  return has_fcntlcall()
      ? *calling_.fcntlcall_
      : ::Request_Fcntl::default_instance();
}
::Request_Fcntl* Request::mutable_fcntlcall() {
  if (!has_fcntlcall()) {
    clear_calling();
    set_has_fcntlcall();
    calling_.fcntlcall_ = new ::Request_Fcntl;
  }
  // @@protoc_insertion_point(field_mutable:Request.fcntlCall)
  return calling_.fcntlcall_;
}
::Request_Fcntl* Request::release_fcntlcall() {
  // @@protoc_insertion_point(field_release:Request.fcntlCall)
  if (has_fcntlcall()) {
    clear_has_calling();
    ::Request_Fcntl* temp = calling_.fcntlcall_;
    calling_.fcntlcall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_fcntlcall(::Request_Fcntl* fcntlcall) {
  clear_calling();
  if (fcntlcall) {
    set_has_fcntlcall();
    calling_.fcntlcall_ = fcntlcall;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.fcntlCall)
}

// optional .Request.Atstart atstartAction = 16;
bool Request::has_atstartaction() const {
  return calling_case() == kAtstartAction;
}
void Request::set_has_atstartaction() {
  _oneof_case_[0] = kAtstartAction;
}
void Request::clear_atstartaction() {
  if (has_atstartaction()) {
    delete calling_.atstartaction_;
    clear_has_calling();
  }
}
 const ::Request_Atstart& Request::atstartaction() const {
  // @@protoc_insertion_point(field_get:Request.atstartAction)
  return has_atstartaction()
      ? *calling_.atstartaction_
      : ::Request_Atstart::default_instance();
}
::Request_Atstart* Request::mutable_atstartaction() {
  if (!has_atstartaction()) {
    clear_calling();
    set_has_atstartaction();
    calling_.atstartaction_ = new ::Request_Atstart;
  }
  // @@protoc_insertion_point(field_mutable:Request.atstartAction)
  return calling_.atstartaction_;
}
::Request_Atstart* Request::release_atstartaction() {
  // @@protoc_insertion_point(field_release:Request.atstartAction)
  if (has_atstartaction()) {
    clear_has_calling();
    ::Request_Atstart* temp = calling_.atstartaction_;
    calling_.atstartaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_atstartaction(::Request_Atstart* atstartaction) {
  clear_calling();
  if (atstartaction) {
    set_has_atstartaction();
    calling_.atstartaction_ = atstartaction;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.atstartAction)
}

// required uint64 pid = 15;
bool Request::has_pid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_pid() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_pid() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
 ::google::protobuf::uint64 Request::pid() const {
  // @@protoc_insertion_point(field_get:Request.pid)
  return pid_;
}
 void Request::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Request.pid)
}

bool Request::has_calling() const {
  return calling_case() != CALLING_NOT_SET;
}
void Request::clear_has_calling() {
  _oneof_case_[0] = CALLING_NOT_SET;
}
Request::CallingCase Request::calling_case() const {
  return Request::CallingCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
